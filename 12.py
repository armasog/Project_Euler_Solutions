import unittest
from math import sqrt, ceil

'''
Challenge:

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

'''


class TestSuite(unittest.TestCase):
    def test_generate_triangle_numbers(self):
        assert generate_triangle_number(7) == 28

    def test_factor_out(self):
        assert factor_out(21) == [1, 3, 7, 21]
        
    def test_all_factors(self):
        assert prime_factors(28) == [1, 2, 4, 7, 14, 28]

    def test_solution(self):
        assert solution(5) == 28


def generate_triangle_number(position):
    result = 0
    for i in range(1, position + 1):
        result += i
    return result


def is_prime(number):
    for i in range(2, ceil(sqrt(number) + 1)):  # As a property of prime numbers, we only need to test factors less than
        # or equal to the sqrt
        if number == 2:
            return True
        if number % i == 0:
            return False  # If the number is divisible by any number other than itself or 1 is_prime will evaluate to
            #  False and break the loop
    return True


def factor_out(number):
    result = []
    j = number
    for i in range(1, ceil(sqrt(number)) + 1):
        if j % i == 0:
            if i not in result:
                result.append(int(i))
            j = j / i
            if j not in result:
                result.append(int(j))
    result = sorted(result)
    return result


def prime_factors(number):
    result = factor_out(number)
    for factor in result:
        additional_factors = []
        if not is_prime(factor):
            additional_factors = factor_out(factor)
            for item in additional_factors:
                if item not in result:
                    result.append(item)
    result = sorted(result)
    return result


def solution(target_divisors):
    for i in range(1, 999999999):
        triangle_number = generate_triangle_number(i)
        factors = find_factors(triangle_number)
        if len(factors) > target_divisors:
            break
    return triangle_number
