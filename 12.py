import unittest
from math import sqrt, ceil

'''
Challenge:

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

'''


class TestSuite(unittest.TestCase):
    def test_generate_triangle_number(self):
        assert generate_triangle_number(7) == 28

    def test_divisors(self):
        assert divisors(21) == [1, 3, 7, 21]

    def test_solution(self):
        assert solution(5) == 28


def generate_triangle_number(position):
    return int((position * (position + 1)) / 2)


def divisors(number):
    result = []
    for i in range(1, number + 1):
        if number % i == 0:
            if i not in result:
                result.append(int(i))
    result = sorted(result)
    return result

def solution(target_divisors):
    for i in range(1, 999999999):
        triangle_number = generate_triangle_number(i)
        factors = divisors(triangle_number)
        if len(factors) > target_divisors:
            break
    return triangle_number


for i in range(1, 7):
    print(i, generate_triangle_number(i))
